import uuid
import os
import io
import logging
import tempfile
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from pydub import AudioSegment
from difflib import get_close_matches

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7816260297:AAFDjI4_Tvsm9k6t8uymdUGkwD5zSptiCJI"
SALUTE_SPEECH_CLIENT_ID = "0750183c-dc6b-4a49-bc5e-7cfbdc5a93e6"
CLIENT_SECRET = "76c46237-c157-42cd-a71a-e2523bb686fe"
AUTHORIZATION_KEY = "MDc1MDE4M2MtZGM2Yi00YTQ5LWJjNWUtN2NmYmRjNWE5M2U2Ojc2YzQ2MjM3LWMxNTctNDJjZC1hNzFhLWUyNTIzYmI2ODZmZQ=="
TOKEN_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
AUDIO_CHAT_ID = -1002382138419  # ID —á–∞—Ç–∞ –¥–ª—è –∞—É–¥–∏–æ
TARGET_GROUP_ID = -1002385047417  # ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã

# –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
KNOWN_ARTISTS = [
    "–°–∏–∞", "Thirty Seconds to Mars", "Lady Gaga", "–î–∂–µ–π—Å–æ–Ω –î–µ—Ä—É–ª–æ", "Pink",
    "Maroon five", "–î—É–∞ –õ–∏–ø–∞", "OneRepublic", "Imagine Dragons", "–†–∏—Ç–∞ –û—Ä–∞",
    "Coldplay", "David Guetta", "Selena Gomez", "The Black Eyed Peas",
    "Ariana Grande", "Justin Timberlake", "Rihanna", "M√•neskin", "–ú–∞–Ω–µ—Å–∫–∏–Ω",
    "Weeknd", "Shakira", "Ed Sheeran", "Taylor Swift"
]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
SALUTE_SPEECH_TOKEN = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def get_access_token():
    global SALUTE_SPEECH_TOKEN
    rq_uid = str(uuid.uuid4())
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": rq_uid,
        "Authorization": f"Basic {AUTHORIZATION_KEY}",
    }
    data = {
        "grant_type": "client_credentials",
        "scope": "SALUTE_SPEECH_PERS",
    }
    try:
        response = requests.post(TOKEN_URL, headers=headers, data=data, verify=False)
        if response.status_code == 200:
            SALUTE_SPEECH_TOKEN = response.json().get("access_token")
            logger.info("–¢–æ–∫–µ–Ω Sber SmartSpeech —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: {e}")

# –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Sber SmartSpeech
def recognize_audio(audio_data: io.BytesIO) -> str:
    global SALUTE_SPEECH_TOKEN
    if not SALUTE_SPEECH_TOKEN:
        get_access_token()

    url = "https://smartspeech.sber.ru/rest/v1/speech:recognize"
    headers = {
        "Authorization": f"Bearer {SALUTE_SPEECH_TOKEN}",
        "Content-Type": "audio/mpeg",
        "Accept": "application/json",
    }
    try:
        response = requests.post(url, headers=headers, data=audio_data.read(), verify=False)
        if response.status_code == 200:
            result = response.json()
            if "result" in result:
                return result["result"]
            else:
                logger.error(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞: {result}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ: {e}")
    return None

# –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
def find_closest_artist(text: str) -> str:
    matches = get_close_matches(text, KNOWN_ARTISTS, n=1, cutoff=0.6)
    return matches[0] if matches else None

def convert_ogg_to_mp3(ogg_data: io.BytesIO) -> io.BytesIO:
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é OGG –≤ MP3")
        audio = AudioSegment.from_ogg(ogg_data)
        mp3_data = io.BytesIO()
        audio.export(mp3_data, format="mp3")
        mp3_data.seek(0)
        logger.info("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ MP3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return mp3_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OGG –≤ MP3: {e}")
        return None
    
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π (–≥–æ–ª–æ—Å–æ–≤—ã–µ)
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        voice_file = await update.message.voice.get_file()
        ogg_data = io.BytesIO()
        await voice_file.download_to_memory(out=ogg_data)
        ogg_data.seek(0)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ MP3
        mp3_data = convert_ogg_to_mp3(ogg_data)
        if not mp3_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        await process_audio(mp3_data, update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π (MP3)
async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_file = await update.message.audio.get_file()
        mp3_data = io.BytesIO()
        await audio_file.download_to_memory(out=mp3_data)
        mp3_data.seek(0)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        await process_music(mp3_data, update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = update.message.text.lower()

        # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        clean_text = ''.join(e for e in text if e.isalnum() or e.isspace())

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
        words = clean_text.split()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∏–º—ë–Ω
        for word in words:
            closest_artist = find_closest_artist(word)
            if closest_artist:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await context.bot.send_message(chat_id=TARGET_GROUP_ID, text=f"üåü –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {closest_artist}")
                await message.pin()
                break

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")

# –û–±—Ä–µ–∑–∫–∞ –∞—É–¥–∏–æ
def trim_audio(audio_data: io.BytesIO, start_time: int, end_time: int) -> io.BytesIO:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if audio_data.getbuffer().nbytes == 0:
            logger.error("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã.")
            return None

        logger.debug(f"–ü–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö: {audio_data.getvalue()[:100]}")

        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –ø–æ—Ç–æ–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
        audio = AudioSegment.from_file(audio_data, format="ogg")  # –î–ª—è OGG —Ñ–∞–π–ª–æ–≤
        logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ: {len(audio)} –º—Å")
        
        # –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ
        trimmed_audio = audio[start_time:end_time]
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ—Ç–æ–∫
        output = io.BytesIO()
        trimmed_audio.export(output, format="mp3")
        output.seek(0)
        logger.info("–û–±—Ä–µ–∑–∫–∞ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return output
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∞—É–¥–∏–æ: {e}")
        return None
    
async def process_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_file = await update.message.audio.get_file()
        audio_data = io.BytesIO()
        await audio_file.download_to_memory(audio_data)
        audio_data.seek(0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if audio_data.getbuffer().nbytes == 0:
            logger.error("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã.")
            await update.message.reply_text("–ê—É–¥–∏–æ—Ñ–∞–π–ª –ø—É—Å—Ç.")
            return

        logger.debug(f"–ü–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö: {audio_data.getvalue()[:100]}")

        # –ò—â–µ–º —Ñ—Ä–∞–∑—É "–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞"
        trigger_time = find_trigger_in_audio(audio_data)
        if not trigger_time:
            await update.message.reply_text("–§—Ä–∞–∑–∞ '–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ (2-3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑—ã)
        trimmed_audio = trim_audio(audio_data, trigger_time, trigger_time + 3000)
        if not trimmed_audio:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∞—É–¥–∏–æ.")
            return

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        text = recognize_audio(trimmed_audio)
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_trimmed_audio(update, context, trimmed_audio, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
    
# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
async def process_audio(audio_data: io.BytesIO, update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ò—â–µ–º —Ñ—Ä–∞–∑—É "–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞"
        trigger_time = find_trigger_in_audio(audio_data)
        if not trigger_time:
            await update.message.reply_text("–§—Ä–∞–∑–∞ '–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ (2-3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑—ã)
        trimmed_audio = trim_audio(audio_data, trigger_time, trigger_time + 3000)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º audio_data
        if not trimmed_audio:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∞—É–¥–∏–æ.")
            return

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        text = recognize_audio(trimmed_audio)
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_trimmed_audio(update, context, trimmed_audio, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ
async def process_music(audio_data: io.BytesIO, update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        text = recognize_audio(audio_data)
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if isinstance(text, list):
            text = " ".join(text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞

        if "–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞" in text.lower():
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MP3 –≤ OGG
            ogg_data = convert_mp3_to_ogg(audio_data)
            if not ogg_data:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_document(
                chat_id=AUDIO_CHAT_ID,
                document=mp3_data,
                caption="/search"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
async def send_trimmed_audio(update: Update, context: ContextTypes.DEFAULT_TYPE, audio_data: io.BytesIO, text: str):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_filename = f"trimmed_audio_{os.urandom(8).hex()}.ogg"
        with open(temp_filename, "wb") as temp_file:
            temp_file.write(audio_data.getvalue())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º /search
        with open(temp_filename, "rb") as audio_file:
            await context.bot.send_voice(
                chat_id=AUDIO_CHAT_ID,
                voice=audio_file,
                caption="/search"
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = update.message.text.lower()

        # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        clean_text = ''.join(e for e in text if e.isalnum() or e.isspace())

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
        words = clean_text.split()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∏–º—ë–Ω
        for word in words:
            closest_artist = find_closest_artist(word)
            if closest_artist:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø—É –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await context.bot.send_message(chat_id=TARGET_GROUP_ID, text=f"üåü –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {closest_artist}")
                await message.pin()
                break

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞.")

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ OGG
def convert_mp3_to_ogg(mp3_data: io.BytesIO) -> io.BytesIO:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if mp3_data.getbuffer().nbytes == 0:
            logger.error("–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã.")
            return None

        logger.debug(f"–ü–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö: {mp3_data.getvalue()[:100]}")

        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –ø–æ—Ç–æ–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
        audio = AudioSegment.from_file(mp3_data, format="mp3")  # –î–ª—è MP3 —Ñ–∞–π–ª–æ–≤
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OGG
        ogg_data = io.BytesIO()
        audio.export(ogg_data, format="ogg")
        ogg_data.seek(0)
        logger.info("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ OGG –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return ogg_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ MP3 –≤ OGG: {e}")
        return None
    
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
async def process_audio(audio_data: io.BytesIO, update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ò—â–µ–º —Ñ—Ä–∞–∑—É "–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞"
        trigger_time = find_trigger_in_audio(audio_data)
        if not trigger_time:
            await update.message.reply_text("–§—Ä–∞–∑–∞ '–∑–≤–µ–∑–¥–∞ —á–∞—Å–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ (2-3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑—ã)
        trimmed_audio = trim_audio(audio_data, trigger_time, trigger_time + 3000)
        if not trimmed_audio:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –∞—É–¥–∏–æ.")
            return

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
        text = recognize_audio(trimmed_audio)
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await send_trimmed_audio(update, context, trimmed_audio, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
        
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
