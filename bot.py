from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
)
import logging
import time
import re
import os
from bs4 import BeautifulSoup
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ CSV
HTML_URL = os.getenv("HTML_URL")

# ID —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
TARGET_GROUP_ID = -1002382138419

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ ID –≥—Ä—É–ø–ø
ALLOWED_CHAT_IDS = [-1002201488475, -1002437528572, -1002385047417, -1002382138419]

# –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (45 –º–∏–Ω—É—Ç = 2700 —Å–µ–∫—É–Ω–¥)
PINNED_DURATION = 2700

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞
ALLOWED_USER = "@Muzikant1429"

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–∞–Ω—Ç–∏–º–∞—Ç) - –∏—â–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
BANNED_WORDS = ["–±–ª—è–¥", "—Ö—É–π", "–ø–∏–∑–¥", "–Ω–∞—Ö—É", "–≥–∞–Ω–¥–æ–Ω", "–ø–∏–¥—Ä", "–ø–∏–¥–æ—Ä–∞—Å", "–ø–∏–¥–∞—Ä", 
                "—à–∞–ª–∞–≤", "—à–ª—é—Ö", "–º—Ä–∞–∑—å", "–º—Ä–∞–∑–æ", "–µ–±–∞—Ç", "–µ–±–∞–ª", "–¥–µ–±–∏–ª", "–∏–º–µ–±–µ—Ü–∏–ª", "–≥–æ–≤–Ω—é–∫"]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ –∏ —Å—Å—ã–ª–æ–∫
MESSENGER_KEYWORDS = [
    "t.me", "telegram", "whatsapp", "viber", "discord", "vk.com", "instagram",
    "facebook", "twitter", "youtube", "http", "www", ".com", ".ru", ".net", "tiktok"
]

# –õ–∏–º–∏—Ç—ã –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞
SPAM_LIMIT = 4  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
SPAM_INTERVAL = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MUTE_DURATION = 900  # –í—Ä–µ–º—è –º—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (15 –º–∏–Ω—É—Ç)

user_message_history = {}  # {user_id: [(chat_id, message_id), ...]}
user_message_counts = {}  # {user_id: [timestamp1, timestamp2, ...]}
user_mute_times = {}  # {user_id: mute_end_time}

async def delete_all_user_messages(context: ContextTypes.DEFAULT_TYPE, user_id: int):
    if user_id in user_message_history:
        for chat_id, message_id in user_message_history[user_id]:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        user_message_history[user_id].clear()  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
last_pinned_times = {}  # {chat_id: timestamp}
last_user_username = {}  # {chat_id: username}
last_zch_times = {}  # {chat_id: timestamp}
last_thanks_times = {}  # {chat_id: timestamp}
pinned_messages = {}  # {chat_id: message_id}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
active_users = {}  # {user_id: {"username": str, "delete_count": int, "timestamp": int}}
pinned_stats = {}  # {user_id: {"username": str, "count": int}}
banned_users = set()  # {user_id}
spammers = {}  # {user_id: {"count": int, "timestamp": int}}


async def check_admin_rights(context, chat_id):
    try:
        chat_member = await context.bot.get_chat_member(chat_id=chat_id, user_id=context.bot.id)
        return chat_member.status in ["administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def clean_text(text: str) -> str:
    if not text:
        return ""
    return " ".join(text.split()).lower()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
def load_star_messages_from_html():
    try:
        response = requests.get(HTML_URL)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        table_rows = soup.find_all("tr")
        
        star_messages = {}
        for row in table_rows[1:]:
            cols = row.find_all("td")
            if len(cols) < 3:
                continue

            keyword = clean_text(cols[0].text.strip())
            message = cols[1].text.strip()
            photo_url = cols[2].text.strip() if cols[2].text.strip().startswith("http") else None

            if keyword and message:
                star_messages[keyword] = {"message": message, "photo": photo_url}

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(star_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ HTML.")
        return star_messages
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ HTML: {e}")
        return {}

STAR_MESSAGES = load_star_messages_from_html()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin_or_musician(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    user_id = update.message.from_user.id

    if chat_id not in ALLOWED_CHAT_IDS and chat_id != TARGET_GROUP_ID:
        return False

    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status in ["administrator", "creator"]:
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    if update.message.from_user.username == ALLOWED_USER[1:]:
        return True

    return False


async def send_correction_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    try:
        correction_message = await context.bot.send_message(
            chat_id=chat_id,
            text="–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–≤–µ–∑–¥—ã —á–∞—Å–∞ –æ—Ç –ê–¥–º–∏–Ω–∞."
        )
        context.job_queue.run_once(delete_system_message, 10, data=correction_message.message_id, chat_id=chat_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ: {e}")


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_system_message(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    try:
        await context.bot.delete_message(chat_id=job.chat_id, message_id=job.data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def unpin_all_messages(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    try:
        await context.bot.unpin_all_chat_messages(chat_id=chat_id)
        logger.info(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω—ã –≤ —á–∞—Ç–µ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def process_new_pinned_message(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user, text: str, current_time: int):
    try:
        text_cleaned = clean_text(text)
        search_words = text_cleaned.split()
        
        # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ Google —Ç–∞–±–ª–∏—Ü–µ
        target_message = None
        for word in search_words:
            if word in STAR_MESSAGES:
                target_message = STAR_MESSAGES[word]
                break

        # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.pin()
        last_pinned_times[chat_id] = current_time
        last_user_username[chat_id] = user.username if user.username else None

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.id not in pinned_stats:
            pinned_stats[user.id] = {"username": user.username, "count": 0}
        pinned_stats[user.id]["count"] += 1

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É
        if chat_id != TARGET_GROUP_ID:
            if target_message:
                try:
                    if target_message["photo"]:
                        await context.bot.send_photo(
                            chat_id=TARGET_GROUP_ID,
                            photo=target_message["photo"]
                        )
                    forwarded_message = await context.bot.send_message(
                        chat_id=TARGET_GROUP_ID,
                        text=target_message["message"]
                    )
                    await forwarded_message.pin()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
            else:
                new_text = text.replace("üåü ", "").strip()
                try:
                    forwarded_message = await context.bot.send_message(
                        chat_id=TARGET_GROUP_ID,
                        text=new_text
                    )
                    await forwarded_message.pin()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –≥—Ä—É–ø–ø—É
        if target_message and target_message["photo"] and chat_id != TARGET_GROUP_ID:
            try:
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=target_message["photo"]
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
        context.job_queue.run_once(unpin_all_messages, PINNED_DURATION, chat_id=chat_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def process_duplicate_message(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user, text: str, current_time: int):
    try:
        await update.message.delete()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user.id not in active_users:
            active_users[user.id] = {"username": user.username, "delete_count": 0, "timestamp": current_time}
        active_users[user.id]["delete_count"] += 1
        active_users[user.id]["timestamp"] = current_time

        await send_thanks_message(context, chat_id, user)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
async def send_thanks_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user):
    current_time = time.time()
    if current_time - last_thanks_times.get(chat_id, 0) < 180:
        return

    last_user = last_user_username.get(chat_id, "")
    thanks_text = (
        f"{user.username if user.username else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! "
        f"–ó–≤–µ–∑–¥–∞ —á–∞—Å–∞ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{last_user if last_user else '—Ä–∞–Ω–µ–µ'}. "
        f"–ù–∞–¥–µ—é—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏–º–µ–Ω–Ω–æ –í—ã —Å—Ç–∞–Ω–µ—Ç–µ –Ω–∞—à–µ–π üåü!!!"
    )
    
    thanks_message = await context.bot.send_message(chat_id=chat_id, text=thanks_text)
    context.job_queue.run_once(delete_system_message, 180, data=thanks_message.message_id, chat_id=chat_id)
    last_thanks_times[chat_id] = current_time

# –ö–æ–º–∞–Ω–¥–∞ /timer - —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
async def reset_pin_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin_or_musician(update, context):
        response = await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=update.message.chat.id)
        await update.message.delete()
        return

    chat_id = update.message.chat.id
    last_pinned_times[chat_id] = 0
    await context.bot.unpin_all_chat_messages(chat_id=chat_id)
    
    response = await update.message.reply_text("–¢–∞–π–º–µ—Ä –∑–∞–∫—Ä–µ–ø–∞ —Å–±—Ä–æ—à–µ–Ω.")
    context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=chat_id)
    await update.message.delete()

# –ö–æ–º–∞–Ω–¥–∞ /del - —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin_or_musician(update, context):
        response = await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=update.message.chat.id)
        await update.message.delete()
        return

    if not update.message.reply_to_message:
        response = await update.message.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=update.message.chat.id)
        await update.message.delete()
        return

    try:
        await update.message.reply_to_message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    await update.message.delete()

# –ö–æ–º–∞–Ω–¥–∞ /liderX - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–≤–µ–∑–¥–∞–º
async def lider(update: Update, context: ContextTypes.DEFAULT_TYPE):
    days = int(context.args[0]) if context.args else 1
    cutoff_time = time.time() - days * 86400
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    filtered_stats = {
        uid: data for uid, data in pinned_stats.items() 
        if data.get("timestamp", 0) >= cutoff_time
    }
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
    sorted_users = sorted(
        filtered_stats.items(), 
        key=lambda x: x[1]["count"], 
        reverse=True
    )[:3]
    
    if not sorted_users:
        response = await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
    else:
        text = f"–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ {days} –¥.:\n"
        for i, (user_id, data) in enumerate(sorted_users, start=1):
            text += f"{i}. @{data['username']} ‚Äî {data['count']} üåü\n"
        response = await update.message.reply_text(text)
    
    context.job_queue.run_once(delete_system_message, 180, data=response.message_id, chat_id=update.message.chat.id)
    await update.message.delete()

# –ö–æ–º–∞–Ω–¥–∞ /zhX - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–≤–µ–∑–¥—ã —á–∞—Å–∞
async def zh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    count = int(context.args[0]) if context.args else 10
    text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ ‚≠êÔ∏èüïê:\n"
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for i, (user_id, data) in enumerate(list(pinned_stats.items())[:count], start=1):
        text += f"{i}. @{data['username']}\n"
    
    response = await update.message.reply_text(text)
    context.job_queue.run_once(delete_system_message, 180, data=response.message_id, chat_id=update.message.chat.id)
    await update.message.delete()

# –ö–æ–º–∞–Ω–¥–∞ /activeX - —Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
async def active(update: Update, context: ContextTypes.DEFAULT_TYPE):
    days = int(context.args[0]) if context.args else 1
    cutoff_time = time.time() - days * 86400
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    filtered_active = {
        uid: data for uid, data in active_users.items() 
        if data["timestamp"] >= cutoff_time
    }
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    sorted_active = sorted(
        filtered_active.items(), 
        key=lambda x: x[1]["delete_count"], 
        reverse=True
    )[:3]
    
    if not sorted_active:
        response = await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        text = f"–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ {days} –¥.:\n"
        for i, (user_id, data) in enumerate(sorted_active, start=1):
            text += f"{i}. @{data['username']} ‚Äî {data['delete_count']} —Ä–∞–∑\n"
        response = await update.message.reply_text(text)
    
    context.job_queue.run_once(delete_system_message, 180, data=response.message_id, chat_id=update.message.chat.id)
    await update.message.delete()

# –ö–æ–º–∞–Ω–¥–∞ /ban - –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin_or_musician(update, context):
        response = await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –±–∞–Ω–∏—Ç—å!")
        context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=update.message.chat.id)
        await update.message.delete()
        return
    
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        banned_users.add(target_user.id)
        await context.bot.ban_chat_member(chat_id=update.message.chat.id, user_id=target_user.id)
        response = await update.message.reply_text(f"@{target_user.username} –∑–∞–±–∞–Ω–µ–Ω.")
    elif context.args:
        try:
            user_id = int(context.args[0])
            banned_users.add(user_id)
            await context.bot.ban_chat_member(chat_id=update.message.chat.id, user_id=user_id)
            response = await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")
        except ValueError:
            response = await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        response = await update.message.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID.")
    
    context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=update.message.chat.id)
    await update.message.delete()

# –ö–æ–º–∞–Ω–¥–∞ /deban - —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def deban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin_or_musician(update, context):
        response = await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Ä–∞–∑–±–∞–Ω–∏—Ç—å!")
        context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=update.message.chat.id)
        await update.message.delete()
        return
    
    if update.message.reply_to_message:
        target_user = update.message.reply_to_message.from_user
        banned_users.discard(target_user.id)
        await context.bot.unban_chat_member(chat_id=update.message.chat.id, user_id=target_user.id)
        response = await update.message.reply_text(f"@{target_user.username} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    elif context.args:
        try:
            user_id = int(context.args[0])
            banned_users.discard(user_id)
            await context.bot.unban_chat_member(chat_id=update.message.chat.id, user_id=user_id)
            response = await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        except ValueError:
            response = await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        response = await update.message.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID.")
    
    context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=update.message.chat.id)
    await update.message.delete()

# –ö–æ–º–∞–Ω–¥–∞ /ban_list - —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
async def ban_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not banned_users:
        response = await update.message.reply_text("–ë–∞–Ω-–ª–∏—Å—Ç –ø—É—Å—Ç.")
    else:
        text = "–ë–∞–Ω-–ª–∏—Å—Ç:\n"
        for user_id in banned_users:
            text += f"- ID: {user_id}\n"
        response = await update.message.reply_text(text)
    
    context.job_queue.run_once(delete_system_message, 60, data=response.message_id, chat_id=update.message.chat.id)
    await update.message.delete()

# –ö–æ–º–∞–Ω–¥–∞ /google - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google —Ç–∞–±–ª–∏—Ü—ã
async def update_google_table(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin_or_musician(update, context):
        response = await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=update.message.chat.id)
        await update.message.delete()
        return
    
    global STAR_MESSAGES
    STAR_MESSAGES = load_star_messages_from_html()
    
    if STAR_MESSAGES:
        response = await update.message.reply_text(f"–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {len(STAR_MESSAGES)}")
    else:
        response = await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã")
    
    context.job_queue.run_once(delete_system_message, 10, data=response.message_id, chat_id=update.message.chat.id)
    await update.message.delete()

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    user = message.from_user
    chat_id = message.chat.id
    text = message.text
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    if user.id in banned_users:
        await message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    if chat_id not in ALLOWED_CHAT_IDS and chat_id != TARGET_GROUP_ID:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ {chat_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if text is None:
        return

    # –ê–Ω—Ç–∏–º–∞—Ç (–∏—â–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
    if text and any(bad_word in text.lower() for bad_word in BANNED_WORDS):
        await message.delete()
        warning = await context.bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
        context.job_queue.run_once(delete_system_message, 10, data=warning.message_id, chat_id=chat_id)
        return

    # –ê–Ω—Ç–∏—Ä–µ–∫–ª–∞–º–∞
    if text and any(keyword in text.lower() for keyword in MESSENGER_KEYWORDS):
        await message.delete()
        warning = await context.bot.send_message(chat_id, "–†–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")
        context.job_queue.run_once(delete_system_message, 10, data=warning.message_id, chat_id=chat_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –º—É–∑—ã–∫–∞–Ω—Ç–∞)
    if not await is_admin_or_musician(update, context):
        if user.id not in user_message_counts:
            user_message_counts[user.id] = []
        user_message_counts[user.id] = [t for t in user_message_counts[user.id] if current_time - t < SPAM_INTERVAL]
        user_message_counts[user.id].append(current_time)

        if len(user_message_counts[user.id]) > SPAM_LIMIT:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await delete_all_user_messages(context, user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –º—É—Ç–∞
            mute_status = False
            try:
                await context.bot.restrict_chat_member(
                    chat_id=chat_id,
                    user_id=user.id,
                    permissions={"can_send_messages": False},
                    until_date=current_time + MUTE_DURATION
                )
                mute_status = True
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or '–∞–Ω–æ–Ω–∏–º–Ω—ã–π'} –∑–∞–º—É—á–µ–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç –≤ —á–∞—Ç–µ {chat_id}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}: {e}")

            # –ï—Å–ª–∏ –º—É—Ç –Ω–µ —É–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            if not mute_status:
                user_mute_times[user.id] = current_time + MUTE_DURATION
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or '–∞–Ω–æ–Ω–∏–º–Ω—ã–π'} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 15 –º–∏–Ω—É—Ç.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            warning_text = (
                f"{user.username or '–£–≤–∞–∂–∞–µ–º—ã–π —Å–ø–∞–º–µ—Ä'}, –≤ —Å–≤—è–∑–∏ —Å —Ç–µ–º —á—Ç–æ –≤—ã –∑–∞—Ö–ª–∞–º–ª—è–µ—Ç–µ –≥—Ä—É–ø–ø—É, "
                f"–≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è."
            )
            warning_message = await context.bot.send_message(chat_id=chat_id, text=warning_text)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–ø–∞–º–µ—Ä—É {user.username or '–∞–Ω–æ–Ω–∏–º–Ω–æ–º—É'} –≤ —á–∞—Ç–µ {chat_id}.")

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            context.job_queue.run_once(delete_system_message, 10, data=warning_message.message_id, chat_id=chat_id)

            # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ø–∞–º–µ—Ä–∞
            user_message_counts[user.id].clear()
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤–µ–∑–¥—ã —á–∞—Å–∞
    if text and ("–∑–≤–µ–∑–¥–∞" in text.lower() or "–∑—á" in text.lower() or "üåü" in text):
        try:
            chat = await context.bot.get_chat(chat_id)
            pinned_message = chat.pinned_message

            if pinned_message is None:
                await process_new_pinned_message(update, context, chat_id, user, text, current_time)
            else:
                last_pinned_time = last_pinned_times.get(chat_id, 0)
                if current_time - last_pinned_time < PINNED_DURATION:
                    if not await is_admin_or_musician(update, context):
                        await process_duplicate_message(update, context, chat_id, user, text, current_time)
                    else:
                        await process_new_pinned_message(update, context, chat_id, user, text, current_time)
                        await send_correction_message(context, chat_id)
                else:
                    await process_new_pinned_message(update, context, chat_id, user, text, current_time)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–µ–∑–¥—ã: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("timer", reset_pin_timer))
    application.add_handler(CommandHandler("del", delete_message))
    application.add_handler(CommandHandler("lider", lider))
    application.add_handler(CommandHandler("zh", zh))
    application.add_handler(CommandHandler("active", active))
    application.add_handler(CommandHandler("ban", ban_user))
    application.add_handler(CommandHandler("deban", deban_user))
    application.add_handler(CommandHandler("ban_list", ban_list))
    application.add_handler(CommandHandler("google", update_google_table))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    main()
