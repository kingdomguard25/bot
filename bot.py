from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
    CallbackContext
)
import logging
import time
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
TARGET_GROUP_ID = -1002437528572
ALLOWED_CHAT_IDS = [-1002201488475, -1002437528572, -1002385047417, -1002382138419]
PINNED_DURATION = 2700  # 45 –º–∏–Ω—É—Ç
ALLOWED_USER = "@Muzikant1429"

# –ê–Ω—Ç–∏–º–∞—Ç –∏ –∞–Ω—Ç–∏—Å–ø–∞–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BANNED_WORDS = ["–±–ª—è–¥", "—Ö—É–π", "–ø–∏–∑–¥", "–Ω–∞—Ö—É", "–≥–∞–Ω–¥–æ–Ω", "–ø–∏–¥—Ä", "–ø–∏–¥–æ—Ä–∞—Å", "–ø–∏–¥–∞—Ä", "—à–∞–ª–∞–≤", "—à–ª—é—Ö", "–º—Ä–∞–∑—å", "–º—Ä–∞–∑–æ", "–µ–±–∞—Ç", "–µ–±–∞–ª", "–¥–µ–±–∏–ª", "–∏–º–µ–±–µ—Ü–∏–ª", "–≥–æ–≤–Ω—é–∫"]
MESSENGER_KEYWORDS = ["t.me", "telegram", "whatsapp", "viber", "discord", "vk.com", "instagram", "facebook", "twitter", "youtube", "http", "www", ".com", ".ru", ".net", "tiktok"]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
last_pinned_times = {}  # {chat_id: timestamp}
last_user_username = {}  # {chat_id: username}
last_thanks_times = {}  # {chat_id: timestamp}
pinned_messages = {}  # {chat_id: {"message_id": int, "user_id": int}}
message_history = {}  # {message_id: {"chat_id": int, "user_id": int, "text": str}}

async def is_admin_or_musician(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    user_id = update.message.from_user.id

    if chat_id not in ALLOWED_CHAT_IDS and chat_id != TARGET_GROUP_ID:
        return False

    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status in ["administrator", "creator"]:
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")

    if update.message.from_user.username == ALLOWED_USER[1:]:
        return True

    return False

async def delete_system_message(context: CallbackContext):
    job = context.job
    try:
        await context.bot.delete_message(chat_id=job.chat_id, message_id=job.data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def unpin_message(context: CallbackContext):
    job = context.job
    chat_id = job.chat_id
    
    if chat_id in pinned_messages:
        try:
            await context.bot.unpin_chat_message(chat_id=chat_id, message_id=pinned_messages[chat_id]["message_id"])
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            del pinned_messages[chat_id]
            if chat_id in last_pinned_times:
                del last_pinned_times[chat_id]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏: {e}")

async def process_new_pinned_message(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user, text: str):
    try:
        current_time = time.time()
        
        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.pin()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        pinned_messages[chat_id] = {
            "message_id": update.message.message_id,
            "user_id": user.id
        }
        
        last_pinned_times[chat_id] = current_time
        last_user_username[chat_id] = user.username or f"id{user.id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        message_history[update.message.message_id] = {
            "chat_id": chat_id,
            "user_id": user.id,
            "text": text
        }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        context.job_queue.run_once(unpin_message, PINNED_DURATION, chat_id=chat_id)
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ü–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞
        if chat_id != TARGET_GROUP_ID:
            try:
                forwarded = await context.bot.send_message(
                    chat_id=TARGET_GROUP_ID,
                    text=f"üåü {text.replace('üåü', '').strip()}"
                )
                await forwarded.pin()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        
        logger.info(f"–ù–æ–≤–∞—è –ó–ß –æ—Ç @{user.username} –≤ —á–∞—Ç–µ {chat_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏: {e}")

async def process_duplicate_message(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int, user):
    try:
        current_time = time.time()
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        await update.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å (–Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 3 –º–∏–Ω—É—Ç—ã)
        if current_time - last_thanks_times.get(chat_id, 0) > 180:
            last_user = last_user_username.get(chat_id, "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            thanks = await context.bot.send_message(
                chat_id=chat_id,
                text=f"@{user.username or user.id}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ó–≤–µ–∑–¥–∞ —á–∞—Å–∞ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {last_user}. –ù–∞–¥–µ—é—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏–º–µ–Ω–Ω–æ –í—ã —Å—Ç–∞–Ω–µ—Ç–µ –Ω–∞—à–µ–π üåü!!!"
            )
            context.job_queue.run_once(delete_system_message, 180, data=thanks.message_id, chat_id=chat_id)
            last_thanks_times[chat_id] = current_time
        
        logger.info(f"–£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ó–ß –æ—Ç @{user.username} –≤ —á–∞—Ç–µ {chat_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")

async def handle_message_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.edited_message or not update.message:
        return
        
    deleted_message_id = update.message.message_id
    if deleted_message_id in message_history:
        data = message_history[deleted_message_id]
        if data["chat_id"] in pinned_messages and pinned_messages[data["chat_id"]]["message_id"] == deleted_message_id:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if data["chat_id"] in last_pinned_times:
                del last_pinned_times[data["chat_id"]]
            if data["chat_id"] in pinned_messages:
                del pinned_messages[data["chat_id"]]
                
            logger.info(f"–ó–ß —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –≤ —á–∞—Ç–µ {data['chat_id']}")

async def handle_message_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.edited_message:
        return
        
    edited_message = update.edited_message
    if edited_message.message_id in message_history:
        # –ü–æ–ª–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await handle_message(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message = update.message or update.edited_message
        if not message:
            return
            
        user = message.from_user
        chat_id = message.chat.id
        text = message.text or message.caption
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
        if user.id in banned_users:
            await message.delete()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
        if chat_id not in ALLOWED_CHAT_IDS and chat_id != TARGET_GROUP_ID:
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç –∏ —Ä–µ–∫–ª–∞–º—É
        if text:
            text_lower = text.lower()
            if any(bad in text_lower for bad in BANNED_WORDS):
                await message.delete()
                warn = await context.bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
                context.job_queue.run_once(delete_system_message, 10, data=warn.message_id, chat_id=chat_id)
                return
                
            if any(adv in text_lower for adv in MESSENGER_KEYWORDS):
                await message.delete()
                warn = await context.bot.send_message(chat_id, "–†–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")
                context.job_queue.run_once(delete_system_message, 10, data=warn.message_id, chat_id=chat_id)
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ó–ß
        if text and ("–∑–≤–µ–∑–¥–∞" in text.lower() or "–∑—á" in text.lower() or "üåü" in text):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if chat_id in pinned_messages:
                last_pin_time = last_pinned_times.get(chat_id, 0)
                
                # –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –ó–ß
                if await is_admin_or_musician(update, context):
                    await process_new_pinned_message(update, context, chat_id, user, text)
                    correction = await context.bot.send_message(chat_id, "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–≤–µ–∑–¥—ã —á–∞—Å–∞ –æ—Ç –ê–¥–º–∏–Ω–∞.")
                    context.job_queue.run_once(delete_system_message, 10, data=correction.message_id, chat_id=chat_id)
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤—ã—à–ª–æ - —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                elif current_time - last_pin_time < PINNED_DURATION:
                    await process_duplicate_message(update, context, chat_id, user)
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ - –Ω–æ–≤–∞—è –ó–ß
                else:
                    await process_new_pinned_message(update, context, chat_id, user, text)
            else:
                await process_new_pinned_message(update, context, chat_id, user, text)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def reset_pin_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin_or_musician(update, context):
        resp = await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        context.job_queue.run_once(delete_system_message, 10, data=resp.message_id, chat_id=update.message.chat.id)
        await update.message.delete()
        return
        
    chat_id = update.message.chat.id
    if chat_id in pinned_messages:
        await context.bot.unpin_chat_message(chat_id=chat_id, message_id=pinned_messages[chat_id]["message_id"])
        del pinned_messages[chat_id]
    if chat_id in last_pinned_times:
        del last_pinned_times[chat_id]
        
    resp = await update.message.reply_text("–¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω, –º–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –ó–ß.")
    context.job_queue.run_once(delete_system_message, 10, data=resp.message_id, chat_id=chat_id)
    await update.message.delete()

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("timer", reset_pin_timer))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.ALL & filters.UpdateType.EDITED_MESSAGE, handle_message_edit))
    app.add_handler(MessageHandler(filters.ALL & filters.UpdateType.DELETED_MESSAGE, handle_message_deletion))
    
    app.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    main()
